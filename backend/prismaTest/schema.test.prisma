generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("TEST_DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  hashedPassword   String
  name             String
  online           Boolean        @default(false)
  lastSeen         DateTime       @default(now())
  friends          FriendList?    @relation("ownerOfFriendList")
  messages         Message[]
  profile          Profile?
  reactions        Reaction[]
  receivedRequests Request[]      @relation("ReceivedRequests")
  sentRequests     Request[]      @relation("SentRequests")
  conversations    Conversation[] @relation("Conversations")
  friendOf         FriendList[]   @relation("friends")
  blockedBy        FriendList[]   @relation("blocked")
}

model Profile {
  id         String  @id @default(cuid())
  userId     String  @unique
  darkMode   Boolean @default(false)
  showOnline Boolean @default(true)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FriendList {
  id      String @id @default(cuid())
  ownerId String @unique
  owner   User   @relation("ownerOfFriendList", fields: [ownerId], references: [id], onDelete: Cascade)
  friends User[] @relation("friends")
  blocked User[] @relation("blocked")
}

model Request {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  dateSent   DateTime @default(now())

  @@unique([senderId, receiverId])
}

model Conversation {
  id           String    @id @default(cuid())
  messages     Message[]
  participants User[]    @relation("Conversations")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  readBy         String[]
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  reactions      Reaction[]
}

model Reaction {
  id        Int     @id @default(autoincrement())
  type      String
  messageId String
  userId    String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}
